//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./protocol_types');
//HELPER FUNCTIONS AND STRUCTURES

QueryService_setQueryTimeParams_args = function(args) {
  this.queryTimeParams = null;
  if (args) {
    if (args.queryTimeParams !== undefined) {
      this.queryTimeParams = args.queryTimeParams;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryTimeParams is unset!');
    }
  }
};
QueryService_setQueryTimeParams_args.prototype = {};
QueryService_setQueryTimeParams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryTimeParams = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_setQueryTimeParams_args.prototype.write = function(output) {
  output.writeStructBegin('QueryService_setQueryTimeParams_args');
  if (this.queryTimeParams !== null && this.queryTimeParams !== undefined) {
    output.writeFieldBegin('queryTimeParams', Thrift.Type.STRING, 1);
    output.writeString(this.queryTimeParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_setQueryTimeParams_result = function(args) {
  this.err = null;
  if (args instanceof ttypes.QueryException) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
QueryService_setQueryTimeParams_result.prototype = {};
QueryService_setQueryTimeParams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ttypes.QueryException();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_setQueryTimeParams_result.prototype.write = function(output) {
  output.writeStructBegin('QueryService_setQueryTimeParams_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_knnQuery_args = function(args) {
  this.k = null;
  this.queryObj = null;
  this.retExternId = null;
  this.retObj = null;
  if (args) {
    if (args.k !== undefined) {
      this.k = args.k;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field k is unset!');
    }
    if (args.queryObj !== undefined) {
      this.queryObj = args.queryObj;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryObj is unset!');
    }
    if (args.retExternId !== undefined) {
      this.retExternId = args.retExternId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retExternId is unset!');
    }
    if (args.retObj !== undefined) {
      this.retObj = args.retObj;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retObj is unset!');
    }
  }
};
QueryService_knnQuery_args.prototype = {};
QueryService_knnQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.k = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryObj = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.retExternId = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.retObj = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_knnQuery_args.prototype.write = function(output) {
  output.writeStructBegin('QueryService_knnQuery_args');
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.I32, 1);
    output.writeI32(this.k);
    output.writeFieldEnd();
  }
  if (this.queryObj !== null && this.queryObj !== undefined) {
    output.writeFieldBegin('queryObj', Thrift.Type.STRING, 2);
    output.writeString(this.queryObj);
    output.writeFieldEnd();
  }
  if (this.retExternId !== null && this.retExternId !== undefined) {
    output.writeFieldBegin('retExternId', Thrift.Type.BOOL, 3);
    output.writeBool(this.retExternId);
    output.writeFieldEnd();
  }
  if (this.retObj !== null && this.retObj !== undefined) {
    output.writeFieldBegin('retObj', Thrift.Type.BOOL, 4);
    output.writeBool(this.retObj);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_knnQuery_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ttypes.QueryException) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
QueryService_knnQuery_result.prototype = {};
QueryService_knnQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ReplyEntry();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ttypes.QueryException();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_knnQuery_result.prototype.write = function(output) {
  output.writeStructBegin('QueryService_knnQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_rangeQuery_args = function(args) {
  this.r = null;
  this.queryObj = null;
  this.retExternId = null;
  this.retObj = null;
  if (args) {
    if (args.r !== undefined) {
      this.r = args.r;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field r is unset!');
    }
    if (args.queryObj !== undefined) {
      this.queryObj = args.queryObj;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryObj is unset!');
    }
    if (args.retExternId !== undefined) {
      this.retExternId = args.retExternId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retExternId is unset!');
    }
    if (args.retObj !== undefined) {
      this.retObj = args.retObj;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retObj is unset!');
    }
  }
};
QueryService_rangeQuery_args.prototype = {};
QueryService_rangeQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.r = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryObj = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.retExternId = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.retObj = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_rangeQuery_args.prototype.write = function(output) {
  output.writeStructBegin('QueryService_rangeQuery_args');
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.r);
    output.writeFieldEnd();
  }
  if (this.queryObj !== null && this.queryObj !== undefined) {
    output.writeFieldBegin('queryObj', Thrift.Type.STRING, 2);
    output.writeString(this.queryObj);
    output.writeFieldEnd();
  }
  if (this.retExternId !== null && this.retExternId !== undefined) {
    output.writeFieldBegin('retExternId', Thrift.Type.BOOL, 3);
    output.writeBool(this.retExternId);
    output.writeFieldEnd();
  }
  if (this.retObj !== null && this.retObj !== undefined) {
    output.writeFieldBegin('retObj', Thrift.Type.BOOL, 4);
    output.writeBool(this.retObj);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_rangeQuery_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ttypes.QueryException) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
QueryService_rangeQuery_result.prototype = {};
QueryService_rangeQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ReplyEntry();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ttypes.QueryException();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_rangeQuery_result.prototype.write = function(output) {
  output.writeStructBegin('QueryService_rangeQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_getDistance_args = function(args) {
  this.obj1 = null;
  this.obj2 = null;
  if (args) {
    if (args.obj1 !== undefined) {
      this.obj1 = args.obj1;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field obj1 is unset!');
    }
    if (args.obj2 !== undefined) {
      this.obj2 = args.obj2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field obj2 is unset!');
    }
  }
};
QueryService_getDistance_args.prototype = {};
QueryService_getDistance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.obj1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.obj2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_getDistance_args.prototype.write = function(output) {
  output.writeStructBegin('QueryService_getDistance_args');
  if (this.obj1 !== null && this.obj1 !== undefined) {
    output.writeFieldBegin('obj1', Thrift.Type.STRING, 1);
    output.writeString(this.obj1);
    output.writeFieldEnd();
  }
  if (this.obj2 !== null && this.obj2 !== undefined) {
    output.writeFieldBegin('obj2', Thrift.Type.STRING, 2);
    output.writeString(this.obj2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryService_getDistance_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ttypes.QueryException) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
QueryService_getDistance_result.prototype = {};
QueryService_getDistance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ttypes.QueryException();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryService_getDistance_result.prototype.write = function(output) {
  output.writeStructBegin('QueryService_getDistance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
QueryServiceClient.prototype = {};
QueryServiceClient.prototype.seqid = function() { return this._seqid; }
QueryServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
QueryServiceClient.prototype.setQueryTimeParams = function(queryTimeParams, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setQueryTimeParams(queryTimeParams);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setQueryTimeParams(queryTimeParams);
  }
};

QueryServiceClient.prototype.send_setQueryTimeParams = function(queryTimeParams) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setQueryTimeParams', Thrift.MessageType.CALL, this.seqid());
  var args = new QueryService_setQueryTimeParams_args();
  args.queryTimeParams = queryTimeParams;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryServiceClient.prototype.recv_setQueryTimeParams = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryService_setQueryTimeParams_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null)
};
QueryServiceClient.prototype.knnQuery = function(k, queryObj, retExternId, retObj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_knnQuery(k, queryObj, retExternId, retObj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_knnQuery(k, queryObj, retExternId, retObj);
  }
};

QueryServiceClient.prototype.send_knnQuery = function(k, queryObj, retExternId, retObj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('knnQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new QueryService_knnQuery_args();
  args.k = k;
  args.queryObj = queryObj;
  args.retExternId = retExternId;
  args.retObj = retObj;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryServiceClient.prototype.recv_knnQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryService_knnQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('knnQuery failed: unknown result');
};
QueryServiceClient.prototype.rangeQuery = function(r, queryObj, retExternId, retObj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rangeQuery(r, queryObj, retExternId, retObj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rangeQuery(r, queryObj, retExternId, retObj);
  }
};

QueryServiceClient.prototype.send_rangeQuery = function(r, queryObj, retExternId, retObj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rangeQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new QueryService_rangeQuery_args();
  args.r = r;
  args.queryObj = queryObj;
  args.retExternId = retExternId;
  args.retObj = retObj;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryServiceClient.prototype.recv_rangeQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryService_rangeQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rangeQuery failed: unknown result');
};
QueryServiceClient.prototype.getDistance = function(obj1, obj2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDistance(obj1, obj2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDistance(obj1, obj2);
  }
};

QueryServiceClient.prototype.send_getDistance = function(obj1, obj2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDistance', Thrift.MessageType.CALL, this.seqid());
  var args = new QueryService_getDistance_args();
  args.obj1 = obj1;
  args.obj2 = obj2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueryServiceClient.prototype.recv_getDistance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueryService_getDistance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDistance failed: unknown result');
};
QueryServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
QueryServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

QueryServiceProcessor.prototype.process_setQueryTimeParams = function(seqid, input, output) {
  var args = new QueryService_setQueryTimeParams_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setQueryTimeParams.length === 1) {
    Q.fcall(this._handler.setQueryTimeParams, args.queryTimeParams)
      .then(function(result) {
        var result = new QueryService_setQueryTimeParams_result({success: result});
        output.writeMessageBegin("setQueryTimeParams", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueryService_setQueryTimeParams_result(err);
        output.writeMessageBegin("setQueryTimeParams", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setQueryTimeParams(args.queryTimeParams,  function (err, result) {
      var result = new QueryService_setQueryTimeParams_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setQueryTimeParams", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueryServiceProcessor.prototype.process_knnQuery = function(seqid, input, output) {
  var args = new QueryService_knnQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.knnQuery.length === 4) {
    Q.fcall(this._handler.knnQuery, args.k, args.queryObj, args.retExternId, args.retObj)
      .then(function(result) {
        var result = new QueryService_knnQuery_result({success: result});
        output.writeMessageBegin("knnQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueryService_knnQuery_result(err);
        output.writeMessageBegin("knnQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.knnQuery(args.k, args.queryObj, args.retExternId, args.retObj,  function (err, result) {
      var result = new QueryService_knnQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("knnQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueryServiceProcessor.prototype.process_rangeQuery = function(seqid, input, output) {
  var args = new QueryService_rangeQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rangeQuery.length === 4) {
    Q.fcall(this._handler.rangeQuery, args.r, args.queryObj, args.retExternId, args.retObj)
      .then(function(result) {
        var result = new QueryService_rangeQuery_result({success: result});
        output.writeMessageBegin("rangeQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueryService_rangeQuery_result(err);
        output.writeMessageBegin("rangeQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rangeQuery(args.r, args.queryObj, args.retExternId, args.retObj,  function (err, result) {
      var result = new QueryService_rangeQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rangeQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueryServiceProcessor.prototype.process_getDistance = function(seqid, input, output) {
  var args = new QueryService_getDistance_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDistance.length === 2) {
    Q.fcall(this._handler.getDistance, args.obj1, args.obj2)
      .then(function(result) {
        var result = new QueryService_getDistance_result({success: result});
        output.writeMessageBegin("getDistance", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueryService_getDistance_result(err);
        output.writeMessageBegin("getDistance", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDistance(args.obj1, args.obj2,  function (err, result) {
      var result = new QueryService_getDistance_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getDistance", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

