//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ReplyEntry = module.exports.ReplyEntry = function(args) {
  this.id = null;
  this.dist = null;
  this.externId = null;
  this.obj = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.dist !== undefined) {
      this.dist = args.dist;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dist is unset!');
    }
    if (args.externId !== undefined) {
      this.externId = args.externId;
    }
    if (args.obj !== undefined) {
      this.obj = args.obj;
    }
  }
};
ReplyEntry.prototype = {};
ReplyEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dist = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.externId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.obj = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplyEntry.prototype.write = function(output) {
  output.writeStructBegin('ReplyEntry');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.dist !== null && this.dist !== undefined) {
    output.writeFieldBegin('dist', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.dist);
    output.writeFieldEnd();
  }
  if (this.externId !== null && this.externId !== undefined) {
    output.writeFieldBegin('externId', Thrift.Type.STRING, 3);
    output.writeString(this.externId);
    output.writeFieldEnd();
  }
  if (this.obj !== null && this.obj !== undefined) {
    output.writeFieldBegin('obj', Thrift.Type.STRING, 4);
    output.writeString(this.obj);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryException = module.exports.QueryException = function(args) {
  Thrift.TException.call(this, "QueryException")
  this.name = "QueryException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(QueryException, Thrift.TException);
QueryException.prototype.name = 'QueryException';
QueryException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryException.prototype.write = function(output) {
  output.writeStructBegin('QueryException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

