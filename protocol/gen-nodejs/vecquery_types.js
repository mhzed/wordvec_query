//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var WordEntry = module.exports.WordEntry = function(args) {
  this.word = null;
  this.dist = null;
  this.vector = null;
  if (args) {
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field word is unset!');
    }
    if (args.dist !== undefined && args.dist !== null) {
      this.dist = args.dist;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dist is unset!');
    }
    if (args.vector !== undefined && args.vector !== null) {
      this.vector = Thrift.copyList(args.vector, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vector is unset!');
    }
  }
};
WordEntry.prototype = {};
WordEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dist = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.vector = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readDouble();
          this.vector.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WordEntry.prototype.write = function(output) {
  output.writeStructBegin('WordEntry');
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 1);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.dist !== null && this.dist !== undefined) {
    output.writeFieldBegin('dist', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.dist);
    output.writeFieldEnd();
  }
  if (this.vector !== null && this.vector !== undefined) {
    output.writeFieldBegin('vector', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.vector.length);
    for (var iter7 in this.vector)
    {
      if (this.vector.hasOwnProperty(iter7))
      {
        iter7 = this.vector[iter7];
        output.writeDouble(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VecQueryException = module.exports.VecQueryException = function(args) {
  Thrift.TException.call(this, "VecQueryException");
  this.name = "VecQueryException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(VecQueryException, Thrift.TException);
VecQueryException.prototype.name = 'VecQueryException';
VecQueryException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VecQueryException.prototype.write = function(output) {
  output.writeStructBegin('VecQueryException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

