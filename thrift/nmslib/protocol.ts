/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v0.0.15
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export type ReplyEntryList = Array<ReplyEntry>;
export interface IReplyEntryArgs {
    id: number;
    dist: number;
    externId?: string;
    obj?: string;
}
export class ReplyEntry implements thrift.TStructLike {
    public id: number;
    public dist: number;
    public externId: string;
    public obj: string;
    constructor(args?: IReplyEntryArgs) {
        if (args != null) {
            if (args.id != null) {
                this.id = args.id;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
            }
            if (args.dist != null) {
                this.dist = args.dist;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field dist is unset!");
            }
            if (args.externId != null) {
                this.externId = args.externId;
            }
            if (args.obj != null) {
                this.obj = args.obj;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ReplyEntry");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        if (this.dist != null) {
            output.writeFieldBegin("dist", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.dist);
            output.writeFieldEnd();
        }
        if (this.externId != null) {
            output.writeFieldBegin("externId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.externId);
            output.writeFieldEnd();
        }
        if (this.obj != null) {
            output.writeFieldBegin("obj", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.obj);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public read(input: thrift.TProtocol): void {
        input.readStructBegin();
        while (true) {
            const ret: {
                fname: string;
                ftype: thrift.Thrift.Type;
                fid: number;
            } = input.readFieldBegin();
            const ftype: thrift.Thrift.Type = ret.ftype;
            const fid: number = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        this.id = value_1;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype === thrift.Thrift.Type.DOUBLE) {
                        const value_2: number = input.readDouble();
                        this.dist = value_2;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        this.externId = value_3;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        this.obj = value_4;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
export interface IQueryExceptionArgs {
    message: string;
}
export class QueryException implements thrift.TStructLike {
    public message: string;
    constructor(args?: IQueryExceptionArgs) {
        if (args != null) {
            if (args.message != null) {
                this.message = args.message;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("QueryException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public read(input: thrift.TProtocol): void {
        input.readStructBegin();
        while (true) {
            const ret: {
                fname: string;
                ftype: thrift.Thrift.Type;
                fid: number;
            } = input.readFieldBegin();
            const ftype: thrift.Thrift.Type = ret.ftype;
            const fid: number = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        this.message = value_5;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
export namespace QueryService {
    export interface ISetQueryTimeParamsArgsArgs {
        queryTimeParams: string;
    }
    export class SetQueryTimeParamsArgs implements thrift.TStructLike {
        public queryTimeParams: string;
        constructor(args?: ISetQueryTimeParamsArgsArgs) {
            if (args != null) {
                if (args.queryTimeParams != null) {
                    this.queryTimeParams = args.queryTimeParams;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryTimeParams is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("SetQueryTimeParamsArgs");
            if (this.queryTimeParams != null) {
                output.writeFieldBegin("queryTimeParams", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.queryTimeParams);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_6: string = input.readString();
                            this.queryTimeParams = value_6;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IKnnQueryArgsArgs {
        k: number;
        queryObj: string;
        retExternId: boolean;
        retObj: boolean;
    }
    export class KnnQueryArgs implements thrift.TStructLike {
        public k: number;
        public queryObj: string;
        public retExternId: boolean;
        public retObj: boolean;
        constructor(args?: IKnnQueryArgsArgs) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.queryObj != null) {
                    this.queryObj = args.queryObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryObj is unset!");
                }
                if (args.retExternId != null) {
                    this.retExternId = args.retExternId;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retExternId is unset!");
                }
                if (args.retObj != null) {
                    this.retObj = args.retObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retObj is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("KnnQueryArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.queryObj != null) {
                output.writeFieldBegin("queryObj", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.queryObj);
                output.writeFieldEnd();
            }
            if (this.retExternId != null) {
                output.writeFieldBegin("retExternId", thrift.Thrift.Type.BOOL, 3);
                output.writeBool(this.retExternId);
                output.writeFieldEnd();
            }
            if (this.retObj != null) {
                output.writeFieldBegin("retObj", thrift.Thrift.Type.BOOL, 4);
                output.writeBool(this.retObj);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_7: number = input.readI32();
                            this.k = value_7;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_8: string = input.readString();
                            this.queryObj = value_8;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_9: boolean = input.readBool();
                            this.retExternId = value_9;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_10: boolean = input.readBool();
                            this.retObj = value_10;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IRangeQueryArgsArgs {
        r: number;
        queryObj: string;
        retExternId: boolean;
        retObj: boolean;
    }
    export class RangeQueryArgs implements thrift.TStructLike {
        public r: number;
        public queryObj: string;
        public retExternId: boolean;
        public retObj: boolean;
        constructor(args?: IRangeQueryArgsArgs) {
            if (args != null) {
                if (args.r != null) {
                    this.r = args.r;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field r is unset!");
                }
                if (args.queryObj != null) {
                    this.queryObj = args.queryObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryObj is unset!");
                }
                if (args.retExternId != null) {
                    this.retExternId = args.retExternId;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retExternId is unset!");
                }
                if (args.retObj != null) {
                    this.retObj = args.retObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retObj is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("RangeQueryArgs");
            if (this.r != null) {
                output.writeFieldBegin("r", thrift.Thrift.Type.DOUBLE, 1);
                output.writeDouble(this.r);
                output.writeFieldEnd();
            }
            if (this.queryObj != null) {
                output.writeFieldBegin("queryObj", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.queryObj);
                output.writeFieldEnd();
            }
            if (this.retExternId != null) {
                output.writeFieldBegin("retExternId", thrift.Thrift.Type.BOOL, 3);
                output.writeBool(this.retExternId);
                output.writeFieldEnd();
            }
            if (this.retObj != null) {
                output.writeFieldBegin("retObj", thrift.Thrift.Type.BOOL, 4);
                output.writeBool(this.retObj);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.DOUBLE) {
                            const value_11: number = input.readDouble();
                            this.r = value_11;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_12: string = input.readString();
                            this.queryObj = value_12;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_13: boolean = input.readBool();
                            this.retExternId = value_13;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_14: boolean = input.readBool();
                            this.retObj = value_14;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IGetDistanceArgsArgs {
        obj1: string;
        obj2: string;
    }
    export class GetDistanceArgs implements thrift.TStructLike {
        public obj1: string;
        public obj2: string;
        constructor(args?: IGetDistanceArgsArgs) {
            if (args != null) {
                if (args.obj1 != null) {
                    this.obj1 = args.obj1;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field obj1 is unset!");
                }
                if (args.obj2 != null) {
                    this.obj2 = args.obj2;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field obj2 is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetDistanceArgs");
            if (this.obj1 != null) {
                output.writeFieldBegin("obj1", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.obj1);
                output.writeFieldEnd();
            }
            if (this.obj2 != null) {
                output.writeFieldBegin("obj2", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.obj2);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_15: string = input.readString();
                            this.obj1 = value_15;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_16: string = input.readString();
                            this.obj2 = value_16;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface ISetQueryTimeParamsResultArgs {
        success?: void;
        err?: QueryException;
    }
    export class SetQueryTimeParamsResult implements thrift.TStructLike {
        public success: void;
        public err: QueryException;
        constructor(args?: ISetQueryTimeParamsResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("SetQueryTimeParamsResult");
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.VOID) {
                            input.skip(ftype);
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_17: QueryException = new QueryException();
                            value_17.read(input);
                            this.err = value_17;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IKnnQueryResultArgs {
        success?: Array<ReplyEntry>;
        err?: QueryException;
    }
    export class KnnQueryResult implements thrift.TStructLike {
        public success: Array<ReplyEntry>;
        public err: QueryException;
        constructor(args?: IKnnQueryResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("KnnQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_18: ReplyEntry): void => {
                    value_18.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_19: Array<ReplyEntry> = new Array<ReplyEntry>();
                            const metadata_1: {
                                etype: thrift.Thrift.Type;
                                size: number;
                            } = input.readListBegin();
                            const size_1: number = metadata_1.size;
                            for (let i_1: number = 0; i_1 < size_1; i_1++) {
                                const value_20: ReplyEntry = new ReplyEntry();
                                value_20.read(input);
                                value_19.push(value_20);
                            }
                            input.readListEnd();
                            this.success = value_19;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_21: QueryException = new QueryException();
                            value_21.read(input);
                            this.err = value_21;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IRangeQueryResultArgs {
        success?: Array<ReplyEntry>;
        err?: QueryException;
    }
    export class RangeQueryResult implements thrift.TStructLike {
        public success: Array<ReplyEntry>;
        public err: QueryException;
        constructor(args?: IRangeQueryResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("RangeQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_22: ReplyEntry): void => {
                    value_22.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_23: Array<ReplyEntry> = new Array<ReplyEntry>();
                            const metadata_2: {
                                etype: thrift.Thrift.Type;
                                size: number;
                            } = input.readListBegin();
                            const size_2: number = metadata_2.size;
                            for (let i_2: number = 0; i_2 < size_2; i_2++) {
                                const value_24: ReplyEntry = new ReplyEntry();
                                value_24.read(input);
                                value_23.push(value_24);
                            }
                            input.readListEnd();
                            this.success = value_23;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_25: QueryException = new QueryException();
                            value_25.read(input);
                            this.err = value_25;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IGetDistanceResultArgs {
        success?: number;
        err?: QueryException;
    }
    export class GetDistanceResult implements thrift.TStructLike {
        public success: number;
        public err: QueryException;
        constructor(args?: IGetDistanceResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetDistanceResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.DOUBLE, 0);
                output.writeDouble(this.success);
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.DOUBLE) {
                            const value_26: number = input.readDouble();
                            this.success = value_26;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_27: QueryException = new QueryException();
                            value_27.read(input);
                            this.err = value_27;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export class Client {
        public _seqid: number;
        public _reqs: {
            [name: number]: (err: Error | object | undefined, val?: any) => void;
        };
        public output: thrift.TTransport;
        public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
        constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        public incrementSeqId(): number {
            return this._seqid += 1;
        }
        public setQueryTimeParams(queryTimeParams: string): Promise<void> {
            const requestId: number = this.incrementSeqId();
            return new Promise<void>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_setQueryTimeParams(queryTimeParams, requestId);
            });
        }
        public knnQuery(k: number, queryObj: string, retExternId: boolean, retObj: boolean): Promise<Array<ReplyEntry>> {
            const requestId: number = this.incrementSeqId();
            return new Promise<Array<ReplyEntry>>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQuery(k, queryObj, retExternId, retObj, requestId);
            });
        }
        public rangeQuery(r: number, queryObj: string, retExternId: boolean, retObj: boolean): Promise<Array<ReplyEntry>> {
            const requestId: number = this.incrementSeqId();
            return new Promise<Array<ReplyEntry>>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_rangeQuery(r, queryObj, retExternId, retObj, requestId);
            });
        }
        public getDistance(obj1: string, obj2: string): Promise<number> {
            const requestId: number = this.incrementSeqId();
            return new Promise<number>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_getDistance(obj1, obj2, requestId);
            });
        }
        public send_setQueryTimeParams(queryTimeParams: string, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.CALL, requestId);
            const args: SetQueryTimeParamsArgs = new SetQueryTimeParamsArgs({ queryTimeParams });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public send_knnQuery(k: number, queryObj: string, retExternId: boolean, retObj: boolean, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args: KnnQueryArgs = new KnnQueryArgs({ k, queryObj, retExternId, retObj });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public send_rangeQuery(r: number, queryObj: string, retExternId: boolean, retObj: boolean, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args: RangeQueryArgs = new RangeQueryArgs({ r, queryObj, retExternId, retObj });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public send_getDistance(obj1: string, obj2: string, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.CALL, requestId);
            const args: GetDistanceArgs = new GetDistanceArgs({ obj1, obj2 });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public recv_setQueryTimeParams(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: SetQueryTimeParamsResult = new SetQueryTimeParamsResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            return callback(undefined);
        }
        public recv_knnQuery(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: KnnQueryResult = new KnnQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQuery failed: unknown result"));
            }
        }
        public recv_rangeQuery(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: RangeQueryResult = new RangeQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "rangeQuery failed: unknown result"));
            }
        }
        public recv_getDistance(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: GetDistanceResult = new GetDistanceResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDistance failed: unknown result"));
            }
        }
    }
    export interface IHandler<Context> {
        setQueryTimeParams: (queryTimeParams: string, context?: Context) => void | Promise<void>;
        knnQuery: (k: number, queryObj: string, retExternId: boolean, retObj: boolean, context?: Context) => Array<ReplyEntry> | Promise<Array<ReplyEntry>>;
        rangeQuery: (r: number, queryObj: string, retExternId: boolean, retObj: boolean, context?: Context) => Array<ReplyEntry> | Promise<Array<ReplyEntry>>;
        getDistance: (obj1: string, obj2: string, context?: Context) => number | Promise<number>;
    }
    export class Processor<Context> {
        public _handler: IHandler<Context>;
        constructor(handler: IHandler<Context>) {
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const metadata: {
                fname: string;
                mtype: thrift.Thrift.MessageType;
                rseqid: number;
            } = input.readMessageBegin();
            const fname: string = metadata.fname;
            const rseqid: number = metadata.rseqid;
            const methodName: string = "process_" + fname;
            switch (methodName) {
                case "process_setQueryTimeParams": {
                    return this.process_setQueryTimeParams(rseqid, input, output, context);
                }
                case "process_knnQuery": {
                    return this.process_knnQuery(rseqid, input, output, context);
                }
                case "process_rangeQuery": {
                    return this.process_rangeQuery(rseqid, input, output, context);
                }
                case "process_getDistance": {
                    return this.process_getDistance(rseqid, input, output, context);
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, rseqid);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                }
            }
        }
        public process_setQueryTimeParams(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new SetQueryTimeParamsArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<void>((resolve, reject): void => {
                try {
                    resolve(this._handler.setQueryTimeParams(args.queryTimeParams, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: void): void => {
                const result: SetQueryTimeParamsResult = new SetQueryTimeParamsResult({ success: data });
                output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof QueryException) {
                    const result: SetQueryTimeParamsResult = new SetQueryTimeParamsResult({ err: err });
                    output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        public process_knnQuery(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new KnnQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<Array<ReplyEntry>>((resolve, reject): void => {
                try {
                    resolve(this._handler.knnQuery(args.k, args.queryObj, args.retExternId, args.retObj, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Array<ReplyEntry>): void => {
                const result: KnnQueryResult = new KnnQueryResult({ success: data });
                output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof QueryException) {
                    const result: KnnQueryResult = new KnnQueryResult({ err: err });
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        public process_rangeQuery(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new RangeQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<Array<ReplyEntry>>((resolve, reject): void => {
                try {
                    resolve(this._handler.rangeQuery(args.r, args.queryObj, args.retExternId, args.retObj, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Array<ReplyEntry>): void => {
                const result: RangeQueryResult = new RangeQueryResult({ success: data });
                output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof QueryException) {
                    const result: RangeQueryResult = new RangeQueryResult({ err: err });
                    output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        public process_getDistance(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new GetDistanceArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<number>((resolve, reject): void => {
                try {
                    resolve(this._handler.getDistance(args.obj1, args.obj2, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): void => {
                const result: GetDistanceResult = new GetDistanceResult({ success: data });
                output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof QueryException) {
                    const result: GetDistanceResult = new GetDistanceResult({ err: err });
                    output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
    }
}
