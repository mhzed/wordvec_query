"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v0.0.15
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
const thrift = require("thrift");
class ReplyEntry {
    constructor(args) {
        if (args != null) {
            if (args.id != null) {
                this.id = args.id;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
            }
            if (args.dist != null) {
                this.dist = args.dist;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field dist is unset!");
            }
            if (args.externId != null) {
                this.externId = args.externId;
            }
            if (args.obj != null) {
                this.obj = args.obj;
            }
        }
    }
    write(output) {
        output.writeStructBegin("ReplyEntry");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        if (this.dist != null) {
            output.writeFieldBegin("dist", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.dist);
            output.writeFieldEnd();
        }
        if (this.externId != null) {
            output.writeFieldBegin("externId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.externId);
            output.writeFieldEnd();
        }
        if (this.obj != null) {
            output.writeFieldBegin("obj", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.obj);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.I32) {
                        const value_1 = input.readI32();
                        this.id = value_1;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype === thrift.Thrift.Type.DOUBLE) {
                        const value_2 = input.readDouble();
                        this.dist = value_2;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_3 = input.readString();
                        this.externId = value_3;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_4 = input.readString();
                        this.obj = value_4;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
exports.ReplyEntry = ReplyEntry;
class QueryException {
    constructor(args) {
        if (args != null) {
            if (args.message != null) {
                this.message = args.message;
            }
        }
    }
    write(output) {
        output.writeStructBegin("QueryException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_5 = input.readString();
                        this.message = value_5;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
exports.QueryException = QueryException;
var QueryService;
(function (QueryService) {
    class SetQueryTimeParamsArgs {
        constructor(args) {
            if (args != null) {
                if (args.queryTimeParams != null) {
                    this.queryTimeParams = args.queryTimeParams;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryTimeParams is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("SetQueryTimeParamsArgs");
            if (this.queryTimeParams != null) {
                output.writeFieldBegin("queryTimeParams", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.queryTimeParams);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_6 = input.readString();
                            this.queryTimeParams = value_6;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.SetQueryTimeParamsArgs = SetQueryTimeParamsArgs;
    class KnnQueryArgs {
        constructor(args) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.queryObj != null) {
                    this.queryObj = args.queryObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryObj is unset!");
                }
                if (args.retExternId != null) {
                    this.retExternId = args.retExternId;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retExternId is unset!");
                }
                if (args.retObj != null) {
                    this.retObj = args.retObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retObj is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.queryObj != null) {
                output.writeFieldBegin("queryObj", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.queryObj);
                output.writeFieldEnd();
            }
            if (this.retExternId != null) {
                output.writeFieldBegin("retExternId", thrift.Thrift.Type.BOOL, 3);
                output.writeBool(this.retExternId);
                output.writeFieldEnd();
            }
            if (this.retObj != null) {
                output.writeFieldBegin("retObj", thrift.Thrift.Type.BOOL, 4);
                output.writeBool(this.retObj);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_7 = input.readI32();
                            this.k = value_7;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_8 = input.readString();
                            this.queryObj = value_8;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_9 = input.readBool();
                            this.retExternId = value_9;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_10 = input.readBool();
                            this.retObj = value_10;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.KnnQueryArgs = KnnQueryArgs;
    class RangeQueryArgs {
        constructor(args) {
            if (args != null) {
                if (args.r != null) {
                    this.r = args.r;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field r is unset!");
                }
                if (args.queryObj != null) {
                    this.queryObj = args.queryObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field queryObj is unset!");
                }
                if (args.retExternId != null) {
                    this.retExternId = args.retExternId;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retExternId is unset!");
                }
                if (args.retObj != null) {
                    this.retObj = args.retObj;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field retObj is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("RangeQueryArgs");
            if (this.r != null) {
                output.writeFieldBegin("r", thrift.Thrift.Type.DOUBLE, 1);
                output.writeDouble(this.r);
                output.writeFieldEnd();
            }
            if (this.queryObj != null) {
                output.writeFieldBegin("queryObj", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.queryObj);
                output.writeFieldEnd();
            }
            if (this.retExternId != null) {
                output.writeFieldBegin("retExternId", thrift.Thrift.Type.BOOL, 3);
                output.writeBool(this.retExternId);
                output.writeFieldEnd();
            }
            if (this.retObj != null) {
                output.writeFieldBegin("retObj", thrift.Thrift.Type.BOOL, 4);
                output.writeBool(this.retObj);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.DOUBLE) {
                            const value_11 = input.readDouble();
                            this.r = value_11;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_12 = input.readString();
                            this.queryObj = value_12;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_13 = input.readBool();
                            this.retExternId = value_13;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype === thrift.Thrift.Type.BOOL) {
                            const value_14 = input.readBool();
                            this.retObj = value_14;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.RangeQueryArgs = RangeQueryArgs;
    class GetDistanceArgs {
        constructor(args) {
            if (args != null) {
                if (args.obj1 != null) {
                    this.obj1 = args.obj1;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field obj1 is unset!");
                }
                if (args.obj2 != null) {
                    this.obj2 = args.obj2;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field obj2 is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("GetDistanceArgs");
            if (this.obj1 != null) {
                output.writeFieldBegin("obj1", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.obj1);
                output.writeFieldEnd();
            }
            if (this.obj2 != null) {
                output.writeFieldBegin("obj2", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.obj2);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_15 = input.readString();
                            this.obj1 = value_15;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_16 = input.readString();
                            this.obj2 = value_16;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.GetDistanceArgs = GetDistanceArgs;
    class SetQueryTimeParamsResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("SetQueryTimeParamsResult");
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.VOID) {
                            input.skip(ftype);
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_17 = new QueryException();
                            value_17.read(input);
                            this.err = value_17;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.SetQueryTimeParamsResult = SetQueryTimeParamsResult;
    class KnnQueryResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_18) => {
                    value_18.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_19 = new Array();
                            const metadata_1 = input.readListBegin();
                            const size_1 = metadata_1.size;
                            for (let i_1 = 0; i_1 < size_1; i_1++) {
                                const value_20 = new ReplyEntry();
                                value_20.read(input);
                                value_19.push(value_20);
                            }
                            input.readListEnd();
                            this.success = value_19;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_21 = new QueryException();
                            value_21.read(input);
                            this.err = value_21;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.KnnQueryResult = KnnQueryResult;
    class RangeQueryResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("RangeQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_22) => {
                    value_22.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_23 = new Array();
                            const metadata_2 = input.readListBegin();
                            const size_2 = metadata_2.size;
                            for (let i_2 = 0; i_2 < size_2; i_2++) {
                                const value_24 = new ReplyEntry();
                                value_24.read(input);
                                value_23.push(value_24);
                            }
                            input.readListEnd();
                            this.success = value_23;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_25 = new QueryException();
                            value_25.read(input);
                            this.err = value_25;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.RangeQueryResult = RangeQueryResult;
    class GetDistanceResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("GetDistanceResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.DOUBLE, 0);
                output.writeDouble(this.success);
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.DOUBLE) {
                            const value_26 = input.readDouble();
                            this.success = value_26;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_27 = new QueryException();
                            value_27.read(input);
                            this.err = value_27;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    QueryService.GetDistanceResult = GetDistanceResult;
    class Client {
        constructor(output, protocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        incrementSeqId() {
            return this._seqid += 1;
        }
        setQueryTimeParams(queryTimeParams) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_setQueryTimeParams(queryTimeParams, requestId);
            });
        }
        knnQuery(k, queryObj, retExternId, retObj) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQuery(k, queryObj, retExternId, retObj, requestId);
            });
        }
        rangeQuery(r, queryObj, retExternId, retObj) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_rangeQuery(r, queryObj, retExternId, retObj, requestId);
            });
        }
        getDistance(obj1, obj2) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_getDistance(obj1, obj2, requestId);
            });
        }
        send_setQueryTimeParams(queryTimeParams, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.CALL, requestId);
            const args = new SetQueryTimeParamsArgs({ queryTimeParams });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_knnQuery(k, queryObj, retExternId, retObj, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args = new KnnQueryArgs({ k, queryObj, retExternId, retObj });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_rangeQuery(r, queryObj, retExternId, retObj, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args = new RangeQueryArgs({ r, queryObj, retExternId, retObj });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_getDistance(obj1, obj2, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.CALL, requestId);
            const args = new GetDistanceArgs({ obj1, obj2 });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        recv_setQueryTimeParams(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new SetQueryTimeParamsResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            return callback(undefined);
        }
        recv_knnQuery(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new KnnQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQuery failed: unknown result"));
            }
        }
        recv_rangeQuery(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new RangeQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "rangeQuery failed: unknown result"));
            }
        }
        recv_getDistance(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new GetDistanceResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDistance failed: unknown result"));
            }
        }
    }
    QueryService.Client = Client;
    class Processor {
        constructor(handler) {
            this._handler = handler;
        }
        process(input, output, context) {
            const metadata = input.readMessageBegin();
            const fname = metadata.fname;
            const rseqid = metadata.rseqid;
            const methodName = "process_" + fname;
            switch (methodName) {
                case "process_setQueryTimeParams": {
                    return this.process_setQueryTimeParams(rseqid, input, output, context);
                }
                case "process_knnQuery": {
                    return this.process_knnQuery(rseqid, input, output, context);
                }
                case "process_rangeQuery": {
                    return this.process_rangeQuery(rseqid, input, output, context);
                }
                case "process_getDistance": {
                    return this.process_getDistance(rseqid, input, output, context);
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, rseqid);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                }
            }
        }
        process_setQueryTimeParams(seqid, input, output, context) {
            const args = new SetQueryTimeParamsArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.setQueryTimeParams(args.queryTimeParams, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new SetQueryTimeParamsResult({ success: data });
                output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof QueryException) {
                    const result = new SetQueryTimeParamsResult({ err: err });
                    output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("setQueryTimeParams", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_knnQuery(seqid, input, output, context) {
            const args = new KnnQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.knnQuery(args.k, args.queryObj, args.retExternId, args.retObj, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new KnnQueryResult({ success: data });
                output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof QueryException) {
                    const result = new KnnQueryResult({ err: err });
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_rangeQuery(seqid, input, output, context) {
            const args = new RangeQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.rangeQuery(args.r, args.queryObj, args.retExternId, args.retObj, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new RangeQueryResult({ success: data });
                output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof QueryException) {
                    const result = new RangeQueryResult({ err: err });
                    output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("rangeQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_getDistance(seqid, input, output, context) {
            const args = new GetDistanceArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.getDistance(args.obj1, args.obj2, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new GetDistanceResult({ success: data });
                output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof QueryException) {
                    const result = new GetDistanceResult({ err: err });
                    output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("getDistance", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
    }
    QueryService.Processor = Processor;
})(QueryService = exports.QueryService || (exports.QueryService = {}));
//# sourceMappingURL=data:application/json;base64,