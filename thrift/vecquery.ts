/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v0.0.15
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export type WordEntryList = Array<WordEntry>;
export interface IWordEntryArgs {
    word: string;
    dist: number;
    vector: Array<number>;
}
export class WordEntry implements thrift.TStructLike {
    public word: string;
    public dist: number;
    public vector: Array<number>;
    constructor(args?: IWordEntryArgs) {
        if (args != null) {
            if (args.word != null) {
                this.word = args.word;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
            }
            if (args.dist != null) {
                this.dist = args.dist;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field dist is unset!");
            }
            if (args.vector != null) {
                this.vector = args.vector;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field vector is unset!");
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WordEntry");
        if (this.word != null) {
            output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.word);
            output.writeFieldEnd();
        }
        if (this.dist != null) {
            output.writeFieldBegin("dist", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.dist);
            output.writeFieldEnd();
        }
        if (this.vector != null) {
            output.writeFieldBegin("vector", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.DOUBLE, this.vector.length);
            this.vector.forEach((value_1: number): void => {
                output.writeDouble(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public read(input: thrift.TProtocol): void {
        input.readStructBegin();
        while (true) {
            const ret: {
                fname: string;
                ftype: thrift.Thrift.Type;
                fid: number;
            } = input.readFieldBegin();
            const ftype: thrift.Thrift.Type = ret.ftype;
            const fid: number = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        this.word = value_2;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype === thrift.Thrift.Type.DOUBLE) {
                        const value_3: number = input.readDouble();
                        this.dist = value_3;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype === thrift.Thrift.Type.LIST) {
                        const value_4: Array<number> = new Array<number>();
                        const metadata_1: {
                            etype: thrift.Thrift.Type;
                            size: number;
                        } = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: number = input.readDouble();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        this.vector = value_4;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
export interface IVecQueryExceptionArgs {
    message: string;
}
export class VecQueryException implements thrift.TStructLike {
    public message: string;
    constructor(args?: IVecQueryExceptionArgs) {
        if (args != null) {
            if (args.message != null) {
                this.message = args.message;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VecQueryException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public read(input: thrift.TProtocol): void {
        input.readStructBegin();
        while (true) {
            const ret: {
                fname: string;
                ftype: thrift.Thrift.Type;
                fid: number;
            } = input.readFieldBegin();
            const ftype: thrift.Thrift.Type = ret.ftype;
            const fid: number = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        this.message = value_6;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
export namespace WordvecQueryService {
    export interface IKnnQueryArgsArgs {
        k: number;
        word: string;
    }
    export class KnnQueryArgs implements thrift.TStructLike {
        public k: number;
        public word: string;
        constructor(args?: IKnnQueryArgsArgs) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.word != null) {
                    this.word = args.word;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("KnnQueryArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.word != null) {
                output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.word);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_7: number = input.readI32();
                            this.k = value_7;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_8: string = input.readString();
                            this.word = value_8;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IFindVecArgsArgs {
        word: string;
    }
    export class FindVecArgs implements thrift.TStructLike {
        public word: string;
        constructor(args?: IFindVecArgsArgs) {
            if (args != null) {
                if (args.word != null) {
                    this.word = args.word;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("FindVecArgs");
            if (this.word != null) {
                output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.word);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_9: string = input.readString();
                            this.word = value_9;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IKnnQueryResultArgs {
        success?: Array<WordEntry>;
        err?: VecQueryException;
    }
    export class KnnQueryResult implements thrift.TStructLike {
        public success: Array<WordEntry>;
        public err: VecQueryException;
        constructor(args?: IKnnQueryResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("KnnQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_10: WordEntry): void => {
                    value_10.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_11: Array<WordEntry> = new Array<WordEntry>();
                            const metadata_2: {
                                etype: thrift.Thrift.Type;
                                size: number;
                            } = input.readListBegin();
                            const size_2: number = metadata_2.size;
                            for (let i_2: number = 0; i_2 < size_2; i_2++) {
                                const value_12: WordEntry = new WordEntry();
                                value_12.read(input);
                                value_11.push(value_12);
                            }
                            input.readListEnd();
                            this.success = value_11;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_13: VecQueryException = new VecQueryException();
                            value_13.read(input);
                            this.err = value_13;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export interface IFindVecResultArgs {
        success?: WordEntry;
        err?: VecQueryException;
    }
    export class FindVecResult implements thrift.TStructLike {
        public success: WordEntry;
        public err: VecQueryException;
        constructor(args?: IFindVecResultArgs) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("FindVecResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public read(input: thrift.TProtocol): void {
            input.readStructBegin();
            while (true) {
                const ret: {
                    fname: string;
                    ftype: thrift.Thrift.Type;
                    fid: number;
                } = input.readFieldBegin();
                const ftype: thrift.Thrift.Type = ret.ftype;
                const fid: number = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_14: WordEntry = new WordEntry();
                            value_14.read(input);
                            this.success = value_14;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_15: VecQueryException = new VecQueryException();
                            value_15.read(input);
                            this.err = value_15;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    export class Client {
        public _seqid: number;
        public _reqs: {
            [name: number]: (err: Error | object | undefined, val?: any) => void;
        };
        public output: thrift.TTransport;
        public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
        constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        public incrementSeqId(): number {
            return this._seqid += 1;
        }
        public knnQuery(k: number, word: string): Promise<Array<WordEntry>> {
            const requestId: number = this.incrementSeqId();
            return new Promise<Array<WordEntry>>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQuery(k, word, requestId);
            });
        }
        public findVec(word: string): Promise<WordEntry> {
            const requestId: number = this.incrementSeqId();
            return new Promise<WordEntry>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_findVec(word, requestId);
            });
        }
        public send_knnQuery(k: number, word: string, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args: KnnQueryArgs = new KnnQueryArgs({ k, word });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public send_findVec(word: string, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("findVec", thrift.Thrift.MessageType.CALL, requestId);
            const args: FindVecArgs = new FindVecArgs({ word });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        public recv_knnQuery(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: KnnQueryResult = new KnnQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQuery failed: unknown result"));
            }
        }
        public recv_findVec(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, rseqid: number): void {
            const noop = (): any => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: FindVecResult = new FindVecResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "findVec failed: unknown result"));
            }
        }
    }
    export interface IHandler<Context> {
        knnQuery: (k: number, word: string, context?: Context) => Array<WordEntry> | Promise<Array<WordEntry>>;
        findVec: (word: string, context?: Context) => WordEntry | Promise<WordEntry>;
    }
    export class Processor<Context> {
        public _handler: IHandler<Context>;
        constructor(handler: IHandler<Context>) {
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const metadata: {
                fname: string;
                mtype: thrift.Thrift.MessageType;
                rseqid: number;
            } = input.readMessageBegin();
            const fname: string = metadata.fname;
            const rseqid: number = metadata.rseqid;
            const methodName: string = "process_" + fname;
            switch (methodName) {
                case "process_knnQuery": {
                    return this.process_knnQuery(rseqid, input, output, context);
                }
                case "process_findVec": {
                    return this.process_findVec(rseqid, input, output, context);
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, rseqid);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                }
            }
        }
        public process_knnQuery(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new KnnQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<Array<WordEntry>>((resolve, reject): void => {
                try {
                    resolve(this._handler.knnQuery(args.k, args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Array<WordEntry>): void => {
                const result: KnnQueryResult = new KnnQueryResult({ success: data });
                output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof VecQueryException) {
                    const result: KnnQueryResult = new KnnQueryResult({ err: err });
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        public process_findVec(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol, context?: Context): void {
            const args = new FindVecArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise<WordEntry>((resolve, reject): void => {
                try {
                    resolve(this._handler.findVec(args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: WordEntry): void => {
                const result: FindVecResult = new FindVecResult({ success: data });
                output.writeMessageBegin("findVec", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err: Error): void => {
                if (err instanceof VecQueryException) {
                    const result: FindVecResult = new FindVecResult({ err: err });
                    output.writeMessageBegin("findVec", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("findVec", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
    }
}
