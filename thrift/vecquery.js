"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v0.0.15
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
const thrift = require("thrift");
class WordEntry {
    constructor(args) {
        if (args != null) {
            if (args.word != null) {
                this.word = args.word;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
            }
            if (args.dist != null) {
                this.dist = args.dist;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field dist is unset!");
            }
            if (args.vector != null) {
                this.vector = args.vector;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field vector is unset!");
            }
        }
    }
    write(output) {
        output.writeStructBegin("WordEntry");
        if (this.word != null) {
            output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.word);
            output.writeFieldEnd();
        }
        if (this.dist != null) {
            output.writeFieldBegin("dist", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.dist);
            output.writeFieldEnd();
        }
        if (this.vector != null) {
            output.writeFieldBegin("vector", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.DOUBLE, this.vector.length);
            this.vector.forEach((value_1) => {
                output.writeDouble(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_2 = input.readString();
                        this.word = value_2;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype === thrift.Thrift.Type.DOUBLE) {
                        const value_3 = input.readDouble();
                        this.dist = value_3;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype === thrift.Thrift.Type.LIST) {
                        const value_4 = new Array();
                        const metadata_1 = input.readListBegin();
                        const size_1 = metadata_1.size;
                        for (let i_1 = 0; i_1 < size_1; i_1++) {
                            const value_5 = input.readDouble();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        this.vector = value_4;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
exports.WordEntry = WordEntry;
class VecQueryException {
    constructor(args) {
        if (args != null) {
            if (args.message != null) {
                this.message = args.message;
            }
        }
    }
    write(output) {
        output.writeStructBegin("VecQueryException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype === thrift.Thrift.Type.STRING) {
                        const value_6 = input.readString();
                        this.message = value_6;
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                default: {
                    input.skip(ftype);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }
}
exports.VecQueryException = VecQueryException;
var WordvecQueryService;
(function (WordvecQueryService) {
    class KnnQueryArgs {
        constructor(args) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.word != null) {
                    this.word = args.word;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.word != null) {
                output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.word);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_7 = input.readI32();
                            this.k = value_7;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_8 = input.readString();
                            this.word = value_8;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryArgs = KnnQueryArgs;
    class KnnQueryOnVectorArgs {
        constructor(args) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.vector != null) {
                    this.vector = args.vector;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field vector is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryOnVectorArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.vector != null) {
                output.writeFieldBegin("vector", thrift.Thrift.Type.LIST, 2);
                output.writeListBegin(thrift.Thrift.Type.DOUBLE, this.vector.length);
                this.vector.forEach((value_9) => {
                    output.writeDouble(value_9);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_10 = input.readI32();
                            this.k = value_10;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_11 = new Array();
                            const metadata_2 = input.readListBegin();
                            const size_2 = metadata_2.size;
                            for (let i_2 = 0; i_2 < size_2; i_2++) {
                                const value_12 = input.readDouble();
                                value_11.push(value_12);
                            }
                            input.readListEnd();
                            this.vector = value_11;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryOnVectorArgs = KnnQueryOnVectorArgs;
    class KnnQueryOnExpressionArgs {
        constructor(args) {
            if (args != null) {
                if (args.k != null) {
                    this.k = args.k;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field k is unset!");
                }
                if (args.expression != null) {
                    this.expression = args.expression;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field expression is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryOnExpressionArgs");
            if (this.k != null) {
                output.writeFieldBegin("k", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.k);
                output.writeFieldEnd();
            }
            if (this.expression != null) {
                output.writeFieldBegin("expression", thrift.Thrift.Type.STRING, 2);
                output.writeString(this.expression);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.I32) {
                            const value_13 = input.readI32();
                            this.k = value_13;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_14 = input.readString();
                            this.expression = value_14;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryOnExpressionArgs = KnnQueryOnExpressionArgs;
    class FindVecArgs {
        constructor(args) {
            if (args != null) {
                if (args.word != null) {
                    this.word = args.word;
                }
                else {
                    throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field word is unset!");
                }
            }
        }
        write(output) {
            output.writeStructBegin("FindVecArgs");
            if (this.word != null) {
                output.writeFieldBegin("word", thrift.Thrift.Type.STRING, 1);
                output.writeString(this.word);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRING) {
                            const value_15 = input.readString();
                            this.word = value_15;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.FindVecArgs = FindVecArgs;
    class KnnQueryResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_16) => {
                    value_16.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_17 = new Array();
                            const metadata_3 = input.readListBegin();
                            const size_3 = metadata_3.size;
                            for (let i_3 = 0; i_3 < size_3; i_3++) {
                                const value_18 = new WordEntry();
                                value_18.read(input);
                                value_17.push(value_18);
                            }
                            input.readListEnd();
                            this.success = value_17;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_19 = new VecQueryException();
                            value_19.read(input);
                            this.err = value_19;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryResult = KnnQueryResult;
    class KnnQueryOnVectorResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryOnVectorResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_20) => {
                    value_20.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_21 = new Array();
                            const metadata_4 = input.readListBegin();
                            const size_4 = metadata_4.size;
                            for (let i_4 = 0; i_4 < size_4; i_4++) {
                                const value_22 = new WordEntry();
                                value_22.read(input);
                                value_21.push(value_22);
                            }
                            input.readListEnd();
                            this.success = value_21;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_23 = new VecQueryException();
                            value_23.read(input);
                            this.err = value_23;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryOnVectorResult = KnnQueryOnVectorResult;
    class KnnQueryOnExpressionResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("KnnQueryOnExpressionResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
                this.success.forEach((value_24) => {
                    value_24.write(output);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.LIST) {
                            const value_25 = new Array();
                            const metadata_5 = input.readListBegin();
                            const size_5 = metadata_5.size;
                            for (let i_5 = 0; i_5 < size_5; i_5++) {
                                const value_26 = new WordEntry();
                                value_26.read(input);
                                value_25.push(value_26);
                            }
                            input.readListEnd();
                            this.success = value_25;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_27 = new VecQueryException();
                            value_27.read(input);
                            this.err = value_27;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.KnnQueryOnExpressionResult = KnnQueryOnExpressionResult;
    class FindVecResult {
        constructor(args) {
            if (args != null) {
                if (args.success != null) {
                    this.success = args.success;
                }
                if (args.err != null) {
                    this.err = args.err;
                }
            }
        }
        write(output) {
            output.writeStructBegin("FindVecResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            if (this.err != null) {
                output.writeFieldBegin("err", thrift.Thrift.Type.STRUCT, 1);
                this.err.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        read(input) {
            input.readStructBegin();
            while (true) {
                const ret = input.readFieldBegin();
                const ftype = ret.ftype;
                const fid = ret.fid;
                if (ftype === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fid) {
                    case 0:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_28 = new WordEntry();
                            value_28.read(input);
                            this.success = value_28;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    case 1:
                        if (ftype === thrift.Thrift.Type.STRUCT) {
                            const value_29 = new VecQueryException();
                            value_29.read(input);
                            this.err = value_29;
                        }
                        else {
                            input.skip(ftype);
                        }
                        break;
                    default: {
                        input.skip(ftype);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        }
    }
    WordvecQueryService.FindVecResult = FindVecResult;
    class Client {
        constructor(output, protocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        incrementSeqId() {
            return this._seqid += 1;
        }
        knnQuery(k, word) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQuery(k, word, requestId);
            });
        }
        knnQueryOnVector(k, vector) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQueryOnVector(k, vector, requestId);
            });
        }
        knnQueryOnExpression(k, expression) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_knnQueryOnExpression(k, expression, requestId);
            });
        }
        findVec(word) {
            const requestId = this.incrementSeqId();
            return new Promise((resolve, reject) => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_findVec(word, requestId);
            });
        }
        send_knnQuery(k, word, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.CALL, requestId);
            const args = new KnnQueryArgs({ k, word });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_knnQueryOnVector(k, vector, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("knnQueryOnVector", thrift.Thrift.MessageType.CALL, requestId);
            const args = new KnnQueryOnVectorArgs({ k, vector });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_knnQueryOnExpression(k, expression, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("knnQueryOnExpression", thrift.Thrift.MessageType.CALL, requestId);
            const args = new KnnQueryOnExpressionArgs({ k, expression });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        send_findVec(word, requestId) {
            const output = new this.protocol(this.output);
            output.writeMessageBegin("findVec", thrift.Thrift.MessageType.CALL, requestId);
            const args = new FindVecArgs({ word });
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        }
        recv_knnQuery(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new KnnQueryResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQuery failed: unknown result"));
            }
        }
        recv_knnQueryOnVector(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new KnnQueryOnVectorResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQueryOnVector failed: unknown result"));
            }
        }
        recv_knnQueryOnExpression(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new KnnQueryOnExpressionResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "knnQueryOnExpression failed: unknown result"));
            }
        }
        recv_findVec(input, mtype, rseqid) {
            const noop = () => null;
            const callback = this._reqs[rseqid] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result = new FindVecResult();
            result.read(input);
            input.readMessageEnd();
            if (result.err != null) {
                return callback(result.err);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "findVec failed: unknown result"));
            }
        }
    }
    WordvecQueryService.Client = Client;
    class Processor {
        constructor(handler) {
            this._handler = handler;
        }
        process(input, output, context) {
            const metadata = input.readMessageBegin();
            const fname = metadata.fname;
            const rseqid = metadata.rseqid;
            const methodName = "process_" + fname;
            switch (methodName) {
                case "process_knnQuery": {
                    return this.process_knnQuery(rseqid, input, output, context);
                }
                case "process_knnQueryOnVector": {
                    return this.process_knnQueryOnVector(rseqid, input, output, context);
                }
                case "process_knnQueryOnExpression": {
                    return this.process_knnQueryOnExpression(rseqid, input, output, context);
                }
                case "process_findVec": {
                    return this.process_findVec(rseqid, input, output, context);
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, rseqid);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                }
            }
        }
        process_knnQuery(seqid, input, output, context) {
            const args = new KnnQueryArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.knnQuery(args.k, args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new KnnQueryResult({ success: data });
                output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof VecQueryException) {
                    const result = new KnnQueryResult({ err: err });
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQuery", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_knnQueryOnVector(seqid, input, output, context) {
            const args = new KnnQueryOnVectorArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.knnQueryOnVector(args.k, args.vector, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new KnnQueryOnVectorResult({ success: data });
                output.writeMessageBegin("knnQueryOnVector", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof VecQueryException) {
                    const result = new KnnQueryOnVectorResult({ err: err });
                    output.writeMessageBegin("knnQueryOnVector", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQueryOnVector", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_knnQueryOnExpression(seqid, input, output, context) {
            const args = new KnnQueryOnExpressionArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.knnQueryOnExpression(args.k, args.expression, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new KnnQueryOnExpressionResult({ success: data });
                output.writeMessageBegin("knnQueryOnExpression", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof VecQueryException) {
                    const result = new KnnQueryOnExpressionResult({ err: err });
                    output.writeMessageBegin("knnQueryOnExpression", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("knnQueryOnExpression", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        process_findVec(seqid, input, output, context) {
            const args = new FindVecArgs();
            args.read(input);
            input.readMessageEnd();
            new Promise((resolve, reject) => {
                try {
                    resolve(this._handler.findVec(args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data) => {
                const result = new FindVecResult({ success: data });
                output.writeMessageBegin("findVec", thrift.Thrift.MessageType.REPLY, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            }).catch((err) => {
                if (err instanceof VecQueryException) {
                    const result = new FindVecResult({ err: err });
                    output.writeMessageBegin("findVec", thrift.Thrift.MessageType.REPLY, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("findVec", thrift.Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
    }
    WordvecQueryService.Processor = Processor;
})(WordvecQueryService = exports.WordvecQueryService || (exports.WordvecQueryService = {}));
//# sourceMappingURL=data:application/json;base64,